---

layout: colophon
title: BeerCamp 2011 Colophon

---

Follow along &rarr; [2011.beercamp.com/colophon](http://2011.beercamp.com/colophon)

<button id="toggle-presentation">Toggle presentation mode</button>

## About BeerCamp

+ Fun-time party event at SXSW
+ Primary audience is web folk
+ Primary goal is just to get the word out

## The idea

1. Use CSS 3D transforms
2. Most browsers won't support this. Fall back to faux-3d transforms using 2D scale transforms

<div id="idea-examples" class="view1">
  <figure class="zoom">
    <h3>Zoom</h3>
    <ul>
      <li class="section1">Section 1</li>
      <li class="section2">Section 2</li>
      <li class="section3">Section 3</li>
    </ul>
    <div class="frame"></div>
  </figure>

  <figure class="three-d">
    <h3>3D</h3>
    <ul>
      <li class="section1">Section 1</li>
      <li class="section2">Section 2</li>
      <li class="section3">Section 3</li>
    </ul>
    <div class="frame"></div>
  </figure>
  <nav>
    <button>Section 1</button>
    <button>Section 2</button>
    <button>Section 3</button>
  </nav>
  
</div>

## How the scale transforms work for zoom

+ Apply scale to each section.
+ transform value = 1 / ( scaleFactor ^ ( level - 1 ) )

{% highlight css %}

/* level 2 -> scale = 1 / ( 3^1 ) = 1/3 */
#idea-examples .zoom .section2 {
  -webkit-transform: scale(0.333);
     -moz-transform: scale(0.333);
      -ms-transform: scale(0.333);
       -o-transform: scale(0.333);
          transform: scale(0.333);
}

/* level 3 -> scale = 1 / ( 3^2 ) = 1/9 */
#idea-examples .zoom .section3 {
  -webkit-transform: scale(0.111);
     -moz-transform: scale(0.111);
      -ms-transform: scale(0.111);
       -o-transform: scale(0.111);
          transform: scale(0.111);
}

{% endhighlight %}

+ Then for each position, apply reverse scale to the container
+ transform value = scaleFactor ^ ( level - 1 )

{% highlight css %}

/* scale = 3^1 = 3 */
#idea-examples.view2 .zoom ul {
  -webkit-transform: scale(3);
     -moz-transform: scale(3);
      -ms-transform: scale(3);
       -o-transform: scale(3);
          transform: scale(3);
}

/* scale = 3^2 = 9 */
#idea-examples.view3 .zoom ul {
  -webkit-transform: scale(9);
     -moz-transform: scale(9);
      -ms-transform: scale(9);
       -o-transform: scale(9);
          transform: scale(9);
}

{% endhighlight %}

## Version 1: It works but...

+ Looks okay (sort of) in Safari
+ Terribly slow in other browsers
+ Had to remove lots of visual elements for Chrome / Firefox
+ Navigation relies on buttons
+ In general, not fun

## Finding delight

Design Nobility Pyramid by [Frank Chimero](http://frankchimero.com)

[![Designspeaks Portland by frank-chimero, on Flickr](http://farm4.static.flickr.com/3319/4604592754_f711245c51.jpg)](http://www.flickr.com/photos/frank-sparrow/4604592754/)

[nikebetterworld.com](http://nikebetterworld.com) by Ian Coyle & Duane King

+ Scrolling is immediately rewarding
+ Gets you _involved_
+ Makes you want to play around with the site

## Now then...

+ Delight comes from interaction
+ Interaction -> front end developer's wheelhouse

## Implementing scroll CSS

See [css/style.css](https://github.com/nclud/2011.beercamp.com/blob/gh-pages/css/style.css)

All content is `position: fixed`.

{% highlight css %}

.csstransforms #wrap { position: fixed; }

{% endhighlight %}

Transparent proxy element is the only thing that scrolls.

{% highlight css %}

.csstransforms.no-touch #scroll-proxy { height: 5400px; }

{% endhighlight %}

## Starting JavaScript

See [js/scripts.js](https://github.com/nclud/2011.beercamp.com/blob/gh-pages/js/scripts.js)

Use constructor

{% highlight javascript %}

function Beercamper() {
  // properties
  this.scrolled = 0;
  // etc...
  
  // which method should be used to return CSS transform styles
  this.getScrollTransform = Modernizr.csstransforms3d ? 
    this.getScroll3DTransform : this.getScroll2DTransform;
  
  // bind constructor to window.scroll event
  if ( Modernizr.csstransforms ) {
    window.addEventListener( 'scroll', this, false);
  }
  
}

// enables constructor to be used within event listener
// like obj.addEventListener( eventName, this, false )
Beercamper.prototype.handleEvent = function( event ) {
  if ( this[event.type] ) {
    this[event.type](event);
  }
};

{% endhighlight %}

## handleEvent

+ Binding event _without_ jQuery
+ See [Ajaxian: An alternative way to addEventListener](http://ajaxian.com/archives/an-alternative-way-to-addeventlistener)
+ Using [EventListener](http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventListener)

> Rather than bind inline or add anonymous functions to make our object call context preserved, we can simply add an _handleEvent_ method to whatever object and pass it as EventListener.




